import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Property } from '@/shared/schema';
import { ExportFormat, ExportService, ExportTemplate } from '@/services/exportService';
import { useToast } from '@/hooks/use-toast';
import { FileText, Download, ChevronRight, BarChart, Check, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { useQuery } from '@tanstack/react-query';

interface PropertyInsightsReportProps {
  /**
   * Optional property ID to export just one property
   * If not provided, exports all properties in the current view/filter
   */
  propertyId?: number;
  
  /**
   * Optional button text
   */
  buttonText?: string;
  
  /**
   * Button variant
   */
  variant?: 'default' | 'outline' | 'secondary' | 'ghost' | 'link' | 'destructive';
  
  /**
   * Optional CSS class for styling
   */
  className?: string;
  
  /**
   * Show the dialog or just trigger the export directly
   */
  showDialog?: boolean;
}

/**
 * Enhanced property insights report component with modern Apple-style UI
 * and one-click functionality to generate comprehensive property reports
 */
export const PropertyInsightsReport: React.FC<PropertyInsightsReportProps> = ({
  propertyId,
  buttonText = 'Generate Property Insights',
  variant = 'default',
  className,
  showDialog = false,
}) => {
  const { toast } = useToast();
  const [open, setOpen] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const [selectedFormat, setSelectedFormat] = useState<ExportFormat>(ExportFormat.PDF);
  const [selectedTemplate, setSelectedTemplate] = useState<ExportTemplate>(ExportTemplate.RESIDENTIAL_DETAIL);
  
  // Fetch properties data
  const { data: properties = [] } = useQuery<Property[]>({
    queryKey: propertyId ? ['/api/properties', propertyId] : ['/api/properties'],
    staleTime: 1000 * 60 * 5, // 5 minutes
  });
  
  // Filter to just the requested property if propertyId is specified
  const propertiesToExport = React.useMemo(() => {
    if (propertyId) {
      return properties.filter(p => p.id === propertyId);
    }
    return properties;
  }, [properties, propertyId]);
  
  // Set default template based on number of properties
  React.useEffect(() => {
    if (propertiesToExport.length === 1) {
      setSelectedTemplate(ExportTemplate.RESIDENTIAL_DETAIL);
    } else if (propertiesToExport.length > 1) {
      setSelectedTemplate(ExportTemplate.COMPARATIVE_ANALYSIS);
    }
  }, [propertiesToExport.length]);
  
  const generateReport = async () => {
    if (propertiesToExport.length === 0) {
      toast({
        title: 'No data to export',
        description: 'There are no properties available to export.',
        variant: 'destructive',
      });
      return;
    }
    
    setIsExporting(true);
    
    try {
      // Generate a descriptive filename
      const fileName = propertiesToExport.length === 1
        ? `property-insights-${propertiesToExport[0].parcelId}`
        : `property-insights-${new Date().toISOString().split('T')[0]}`;
      
      // Export with appropriate options
      ExportService.exportWithTemplate(
        propertiesToExport,
        selectedTemplate,
        selectedFormat,
        {
          fileName,
          title: propertiesToExport.length === 1 
            ? `Property Insights: ${propertiesToExport[0].address}`
            : `Property Insights Report (${propertiesToExport.length} Properties)`,
          description: `Comprehensive property insights generated by TerraInsight Property Valuation Platform`,
          dateGenerated: true,
          includeHeaders: true,
          pageSize: 'letter',
          orientation: 'portrait',
          includeImages: true,
        }
      );
      
      setOpen(false); 
      
      toast({
        title: 'Report generated',
        description: 'Your property insights report has been generated successfully.',
        action: <Check className="h-5 w-5 text-green-500" />,
      });
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: 'Export failed',
        description: 'There was an error generating your report. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsExporting(false);
    }
  };
  
  const handleExport = () => {
    if (showDialog) {
      setOpen(true);
    } else {
      generateReport();
    }
  };
  
  return (
    <>
      <motion.div
        whileHover={{ scale: 1.03 }}
        whileTap={{ scale: 0.98 }}
        className="relative group"
      >
        <div className="absolute -inset-1 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl opacity-70 blur-sm group-hover:opacity-100 transition duration-300 z-0" />
        <Button
          variant={variant}
          onClick={handleExport}
          disabled={isExporting || propertiesToExport.length === 0}
          className={`relative z-10 ${className || ''} ${
            variant === 'default' ? 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white hover:shadow-blue-500/50' : ''
          }`}
        >
          {isExporting ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <FileText className="mr-2 h-4 w-4" />
          )}
          {buttonText}
        </Button>
      </motion.div>
      
      {/* Dialog for advanced export options */}
      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent className="sm:max-w-md bg-white/90 backdrop-blur-lg border border-gray-100 shadow-xl">
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-700 to-indigo-600">
              Property Insights Report
            </DialogTitle>
            <DialogDescription>
              Generate a comprehensive insights report for your selected properties.
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-6 py-4">
            <div className="space-y-2">
              <Label className="text-sm font-medium">Report Format</Label>
              <div className="grid grid-cols-2 gap-3">
                <motion.div
                  whileHover={{ y: -2 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setSelectedFormat(ExportFormat.PDF)}
                  className={`p-4 rounded-xl cursor-pointer border transition-all duration-200 flex flex-col items-center ${
                    selectedFormat === ExportFormat.PDF
                      ? 'border-blue-400 bg-blue-50/50 shadow-sm'
                      : 'border-gray-200 hover:border-blue-200 hover:bg-blue-50/20'
                  }`}
                >
                  <Download className={`h-8 w-8 mb-2 ${
                    selectedFormat === ExportFormat.PDF ? 'text-blue-600' : 'text-gray-400'
                  }`} />
                  <span className={`font-medium ${
                    selectedFormat === ExportFormat.PDF ? 'text-blue-700' : 'text-gray-700'
                  }`}>
                    PDF Document
                  </span>
                </motion.div>
                
                <motion.div
                  whileHover={{ y: -2 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setSelectedFormat(ExportFormat.EXCEL)}
                  className={`p-4 rounded-xl cursor-pointer border transition-all duration-200 flex flex-col items-center ${
                    selectedFormat === ExportFormat.EXCEL
                      ? 'border-green-400 bg-green-50/50 shadow-sm'
                      : 'border-gray-200 hover:border-green-200 hover:bg-green-50/20'
                  }`}
                >
                  <Download className={`h-8 w-8 mb-2 ${
                    selectedFormat === ExportFormat.EXCEL ? 'text-green-600' : 'text-gray-400'
                  }`} />
                  <span className={`font-medium ${
                    selectedFormat === ExportFormat.EXCEL ? 'text-green-700' : 'text-gray-700'
                  }`}>
                    Excel Spreadsheet
                  </span>
                </motion.div>
              </div>
            </div>
            
            <div className="space-y-2">
              <Label className="text-sm font-medium">Report Template</Label>
              <RadioGroup
                value={selectedTemplate}
                onValueChange={(value) => setSelectedTemplate(value as ExportTemplate)}
                className="space-y-3"
              >
                <motion.div 
                  whileHover={{ y: -2 }}
                  className={`flex items-start space-x-3 border p-3 rounded-xl cursor-pointer ${
                    selectedTemplate === ExportTemplate.RESIDENTIAL_DETAIL
                      ? 'border-blue-300 bg-blue-50/50'
                      : 'border-gray-200'
                  }`}
                  onClick={() => setSelectedTemplate(ExportTemplate.RESIDENTIAL_DETAIL)}
                >
                  <RadioGroupItem 
                    value={ExportTemplate.RESIDENTIAL_DETAIL} 
                    id="residential-template" 
                    className="mt-1"
                  />
                  <div>
                    <Label htmlFor="residential-template" className="font-medium">Residential Detail</Label>
                    <p className="text-sm text-gray-500">Comprehensive details about residential properties</p>
                  </div>
                </motion.div>
                
                <motion.div 
                  whileHover={{ y: -2 }}
                  className={`flex items-start space-x-3 border p-3 rounded-xl cursor-pointer ${
                    selectedTemplate === ExportTemplate.VALUATION_SUMMARY
                      ? 'border-blue-300 bg-blue-50/50'
                      : 'border-gray-200'
                  }`}
                  onClick={() => setSelectedTemplate(ExportTemplate.VALUATION_SUMMARY)}
                >
                  <RadioGroupItem 
                    value={ExportTemplate.VALUATION_SUMMARY} 
                    id="valuation-template" 
                    className="mt-1"
                  />
                  <div>
                    <Label htmlFor="valuation-template" className="font-medium">Valuation Summary</Label>
                    <p className="text-sm text-gray-500">Focused on property values with statistics and charts</p>
                  </div>
                </motion.div>
                
                <motion.div 
                  whileHover={{ y: -2 }}
                  className={`flex items-start space-x-3 border p-3 rounded-xl cursor-pointer ${
                    selectedTemplate === ExportTemplate.COMPARATIVE_ANALYSIS
                      ? 'border-blue-300 bg-blue-50/50'
                      : 'border-gray-200'
                  }`}
                  onClick={() => setSelectedTemplate(ExportTemplate.COMPARATIVE_ANALYSIS)}
                >
                  <RadioGroupItem 
                    value={ExportTemplate.COMPARATIVE_ANALYSIS} 
                    id="comparative-template" 
                    className="mt-1"
                  />
                  <div>
                    <Label htmlFor="comparative-template" className="font-medium">Comparative Analysis</Label>
                    <p className="text-sm text-gray-500">Side-by-side comparison of selected properties</p>
                  </div>
                </motion.div>
              </RadioGroup>
            </div>
          </div>
          
          <DialogFooter>
            <motion.div
              whileHover={{ scale: 1.03 }}
              whileTap={{ scale: 0.98 }}
              className="w-full md:w-auto"
            >
              <Button
                onClick={generateReport}
                disabled={isExporting}
                className="w-full md:w-auto bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white"
              >
                {isExporting ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <FileText className="mr-2 h-4 w-4" />
                )}
                Generate Report
                <ChevronRight className="ml-2 h-4 w-4" />
              </Button>
            </motion.div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default PropertyInsightsReport;