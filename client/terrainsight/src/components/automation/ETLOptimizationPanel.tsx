import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import {
  AlertTriangle,
  ArrowRight,
  Brain,
  Check,
  CheckCircle,
  ChevronDown,
  Clock,
  Cpu,
  Database,
  Gauge,
  HardDrive,
  Bolt,
  RefreshCw,
  Sparkles,
  Star,
  Workflow,
  X,
  Zap
} from 'lucide-react';
import { OptimizationSuggestion, ETLJob, ETLJobMetrics } from '../../services/etl/ETLTypes';

// Sample ETL Job Data (in a real app, this would come from a service)
const sampleJob: ETLJob = {
  id: 'job-1',
  name: 'Property Data Import',
  description: 'Import property data from county database',
  sourceId: 'source-1',
  targetId: 'target-1',
  transformationIds: ['rule-1', 'rule-2'],
  status: 'success',
  schedule: {
    frequency: 'daily',
    timeOfDay: '02:00',
    lastRun: new Date(Date.now() - 4 * 60 * 60 * 1000),
    nextRun: new Date(Date.now() + 20 * 60 * 60 * 1000)
  },
  metrics: {
    executionTimeMs: 45600,
    cpuUtilization: 65,
    memoryUsageMb: 256,
    rowsProcessed: 25000,
    bytesProcessed: 12500000,
    errorCount: 0,
    warningCount: 2,
    dataQualityScore: 98.5,
    bottlenecks: [
      {
        type: 'cpu',
        severity: 'medium',
        details: 'High CPU usage during data transformation phase'
      }
    ]
  },
  createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
  updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),
  lastRunAt: new Date(Date.now() - 4 * 60 * 60 * 1000)
};

// Sample optimization suggestions (in a real app, these would be generated by AI)
const sampleSuggestions: OptimizationSuggestion[] = [
  {
    id: 'suggestion-1',
    jobId: 'job-1',
    type: 'performance',
    severity: 'high',
    title: 'Optimize SQL Join Operation',
    description: 'The current join operation between property and sales tables is causing a full table scan. Adding an index on the join columns would significantly improve performance.',
    suggestedAction: 'Add an index on property_id column in the sales table',
    estimatedImprovement: {
      metric: 'executionTime',
      percentage: 35
    },
    status: 'new',
    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
  },
  {
    id: 'suggestion-2',
    jobId: 'job-1',
    type: 'resource',
    severity: 'medium',
    title: 'Reduce Memory Usage',
    description: 'The job is using more memory than necessary during the transformation phase. Processing data in smaller batches can reduce memory footprint.',
    suggestedAction: 'Reduce batch size from 5000 to 1000 records',
    estimatedImprovement: {
      metric: 'memory',
      percentage: 40
    },
    status: 'new',
    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
  },
  {
    id: 'suggestion-3',
    jobId: 'job-1',
    type: 'code',
    severity: 'low',
    title: 'Simplify String Transformation',
    description: 'The current string processing is using multiple replace operations that could be optimized with a single regular expression.',
    suggestedAction: 'Replace multiple string operations with a single regex',
    estimatedImprovement: {
      metric: 'executionTime',
      percentage: 15
    },
    status: 'implemented',
    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
  },
  {
    id: 'suggestion-4',
    jobId: 'job-1',
    type: 'scheduling',
    severity: 'medium',
    title: 'Optimize Job Schedule',
    description: 'This job is currently running during peak system usage hours, which leads to resource contention.',
    suggestedAction: 'Reschedule job to run at 3:00 AM instead of 2:00 AM to avoid overlap with other system processes',
    estimatedImprovement: {
      metric: 'executionTime',
      percentage: 20
    },
    status: 'new',
    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
  },
  {
    id: 'suggestion-5',
    jobId: 'job-1',
    type: 'performance',
    severity: 'high',
    title: 'Cache Lookup Data',
    description: 'Repetitive lookups to reference data are causing excessive database calls. Caching this data can greatly improve performance.',
    suggestedAction: 'Implement in-memory caching for reference data',
    estimatedImprovement: {
      metric: 'executionTime',
      percentage: 30
    },
    status: 'in_progress',
    createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000)
  },
  {
    id: 'suggestion-6',
    jobId: 'job-1',
    type: 'code',
    severity: 'low',
    title: 'Optimize Data Serialization',
    description: 'Using a more efficient serialization format for intermediate data can reduce processing time and storage requirements.',
    suggestedAction: 'Switch from JSON to a binary format like Protocol Buffers or MessagePack',
    estimatedImprovement: {
      metric: 'throughput',
      percentage: 25
    },
    status: 'ignored',
    createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000)
  }
];

// Format time display
const formatExecutionTime = (ms: number) => {
  if (ms < 1000) return `${ms}ms`;
  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;
  const minutes = Math.floor(ms / 60000);
  const seconds = Math.floor((ms % 60000) / 1000);
  return `${minutes}m ${seconds}s`;
};

// Helper function to get an icon based on suggestion type
const getSuggestionIcon = (type: string) => {
  switch (type) {
    case 'performance':
      return <Gauge className="h-5 w-5 text-blue-500" />;
    case 'resource':
      return <HardDrive className="h-5 w-5 text-purple-500" />;
    case 'code':
      return <Cpu className="h-5 w-5 text-indigo-500" />;
    case 'scheduling':
      return <Clock className="h-5 w-5 text-amber-500" />;
    default:
      return <Sparkles className="h-5 w-5 text-gray-500" />;
  }
};

// Helper function to get an icon based on suggestion status
const getStatusIcon = (status: string) => {
  switch (status) {
    case 'implemented':
      return <Check className="h-4 w-4 text-green-500" />;
    case 'in_progress':
      return <RefreshCw className="h-4 w-4 text-blue-500" />;
    case 'ignored':
      return <X className="h-4 w-4 text-gray-500" />;
    case 'new':
    default:
      return <Bolt className="h-4 w-4 text-amber-500" />;
  }
};

// Helper function to get severity badge
const getSeverityBadge = (severity: string) => {
  switch (severity) {
    case 'high':
      return (
        <Badge className="bg-red-100 text-red-800 hover:bg-red-100">
          High
        </Badge>
      );
    case 'medium':
      return (
        <Badge className="bg-amber-100 text-amber-800 hover:bg-amber-100">
          Medium
        </Badge>
      );
    case 'low':
      return (
        <Badge className="bg-green-100 text-green-800 hover:bg-green-100">
          Low
        </Badge>
      );
    default:
      return (
        <Badge variant="secondary">
          {severity}
        </Badge>
      );
  }
};

interface ETLOptimizationPanelProps {
  jobId: string;
}

export function ETLOptimizationPanel({ jobId }: ETLOptimizationPanelProps) {
  const [job, setJob] = useState<ETLJob | null>(null);
  const [optimizationScore, setOptimizationScore] = useState(72);
  const [suggestions, setSuggestions] = useState<OptimizationSuggestion[]>([]);
  const [activeSuggestion, setActiveSuggestion] = useState<OptimizationSuggestion | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedTab, setSelectedTab] = useState<'all' | 'new' | 'in_progress' | 'implemented' | 'ignored'>('all');
  
  // Fetch job and suggestions data
  useEffect(() => {
    // In a real app, this would be an API call
    // For now, we'll use the sample data
    setJob(sampleJob);
    setSuggestions(sampleSuggestions);
    
    // Select the first suggestion by default
    if (sampleSuggestions.length > 0) {
      setActiveSuggestion(sampleSuggestions[0]);
    }
  }, [jobId]);
  
  // Function to generate new optimization suggestions
  const handleGenerateOptimizations = () => {
    setIsGenerating(true);
    
    // Simulate API call delay
    setTimeout(() => {
      // In a real app, this would call an AI service
      // For now, we'll just reset the status of some suggestions to "new"
      const updatedSuggestions = suggestions.map(suggestion => {
        if (suggestion.status === 'ignored') {
          return { ...suggestion, status: 'new', createdAt: new Date() };
        }
        return suggestion;
      });
      
      setSuggestions(updatedSuggestions as OptimizationSuggestion[]);
      setIsGenerating(false);
      
      // Update optimization score
      setOptimizationScore(Math.min(optimizationScore + 5, 100));
    }, 2000);
  };
  
  // Function to update suggestion status
  const handleUpdateSuggestionStatus = (id: string, newStatus: 'implemented' | 'in_progress' | 'ignored') => {
    const updatedSuggestions = suggestions.map(suggestion => {
      if (suggestion.id === id) {
        const updatedSuggestion = { ...suggestion, status: newStatus };
        
        // If this was the active suggestion, update it
        if (activeSuggestion && activeSuggestion.id === id) {
          setActiveSuggestion(updatedSuggestion);
        }
        
        return updatedSuggestion;
      }
      return suggestion;
    });
    
    setSuggestions(updatedSuggestions as OptimizationSuggestion[]);
    
    // Update optimization score based on status change
    if (newStatus === 'implemented') {
      setOptimizationScore(Math.min(optimizationScore + 3, 100));
    } else if (newStatus === 'ignored') {
      setOptimizationScore(Math.max(optimizationScore - 1, 0));
    }
  };
  
  // Filter suggestions based on selected tab
  const filteredSuggestions = selectedTab === 'all' 
    ? suggestions 
    : suggestions.filter(suggestion => suggestion.status === selectedTab);
  
  return (
    <div className="space-y-6">
      {job && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card>
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="relative inline-block">
                  <svg className="w-24 h-24">
                    <circle
                      className="text-gray-200"
                      strokeWidth="5"
                      stroke="currentColor"
                      fill="transparent"
                      r="45"
                      cx="50%"
                      cy="50%"
                    />
                    <circle
                      className={`${
                        optimizationScore >= 80 
                          ? 'text-green-500' 
                          : optimizationScore >= 50 
                            ? 'text-amber-500' 
                            : 'text-red-500'
                      }`}
                      strokeWidth="5"
                      strokeDasharray={2 * Math.PI * 45}
                      strokeDashoffset={2 * Math.PI * 45 * (1 - optimizationScore / 100)}
                      strokeLinecap="round"
                      stroke="currentColor"
                      fill="transparent"
                      r="45"
                      cx="50%"
                      cy="50%"
                    />
                  </svg>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-2xl font-bold">{optimizationScore}</span>
                  </div>
                </div>
                <h3 className="mt-2 text-lg font-medium">Optimization Score</h3>
                <p className="text-sm text-gray-500">
                  {optimizationScore >= 80 
                    ? 'Excellent' 
                    : optimizationScore >= 50 
                      ? 'Good' 
                      : 'Needs Improvement'}
                </p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex flex-col items-center justify-center h-full">
                <div className="flex items-center justify-center w-12 h-12 rounded-full bg-blue-100 mb-3">
                  <Zap className="h-6 w-6 text-blue-500" />
                </div>
                <h3 className="text-lg font-medium mb-1">AI Recommendations</h3>
                <p className="text-3xl font-bold mb-1">{suggestions.filter(s => s.status === 'new').length}</p>
                <p className="text-sm text-gray-500">
                  {suggestions.filter(s => s.status === 'new').length === 0
                    ? 'No new recommendations'
                    : 'New optimization recommendations'}
                </p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6">
              <div className="space-y-3">
                <h3 className="text-lg font-medium">Job Performance</h3>
                {job.metrics && (
                  <>
                    <div>
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-sm font-medium">Execution Time</span>
                        <span className="text-sm">{formatExecutionTime(job.metrics.executionTimeMs)}</span>
                      </div>
                      <Progress value={job.metrics.executionTimeMs / 1000} max={120} className="h-2" />
                    </div>
                    
                    <div>
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-sm font-medium">CPU Usage</span>
                        <span className="text-sm">{job.metrics.cpuUtilization}%</span>
                      </div>
                      <Progress value={job.metrics.cpuUtilization} className="h-2" />
                    </div>
                    
                    <div>
                      <div className="flex justify-between items-center mb-1">
                        <span className="text-sm font-medium">Memory Usage</span>
                        <span className="text-sm">{job.metrics.memoryUsageMb} MB</span>
                      </div>
                      <Progress value={job.metrics.memoryUsageMb} max={1024} className="h-2" />
                    </div>
                  </>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      
      <Card>
        <CardHeader className="pb-3">
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>AI-Powered Optimization Suggestions</CardTitle>
              <CardDescription>
                Recommendations to improve ETL job performance and resource utilization
              </CardDescription>
            </div>
            <Button 
              onClick={handleGenerateOptimizations}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Brain className="h-4 w-4 mr-2" />
                  Generate New Suggestions
                </>
              )}
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <Tabs value={selectedTab} onValueChange={(value: string) => {
              if (value === 'all' || value === 'new' || value === 'in_progress' || value === 'implemented' || value === 'ignored') {
                setSelectedTab(value);
              }
            }} className="mb-6">
            <TabsList>
              <TabsTrigger value="all">
                All ({suggestions.length})
              </TabsTrigger>
              <TabsTrigger value="new">
                New ({suggestions.filter(s => s.status === 'new').length})
              </TabsTrigger>
              <TabsTrigger value="in_progress">
                In Progress ({suggestions.filter(s => s.status === 'in_progress').length})
              </TabsTrigger>
              <TabsTrigger value="implemented">
                Implemented ({suggestions.filter(s => s.status === 'implemented').length})
              </TabsTrigger>
            </TabsList>
          </Tabs>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-1 space-y-4">
              {filteredSuggestions.length > 0 ? (
                filteredSuggestions.map(suggestion => (
                  <Card 
                    key={suggestion.id}
                    className={`cursor-pointer hover:bg-gray-50 transition-colors ${
                      activeSuggestion?.id === suggestion.id ? 'bg-gray-50 border-blue-300' : ''
                    }`}
                    onClick={() => setActiveSuggestion(suggestion)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start">
                        <div className="mt-0.5 mr-3">
                          {getSuggestionIcon(suggestion.type)}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h3 className="font-medium">{suggestion.title}</h3>
                            <div className="flex items-center space-x-1 ml-2">
                              {getStatusIcon(suggestion.status)}
                              {getSeverityBadge(suggestion.severity)}
                            </div>
                          </div>
                          <p className="text-sm text-gray-500 mt-1 line-clamp-2">
                            {suggestion.description}
                          </p>
                          <div className="flex items-center mt-2 text-xs text-gray-500">
                            <span>Expected improvement: {suggestion.estimatedImprovement.percentage}%</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))
              ) : (
                <div className="text-center p-12 bg-gray-50 rounded-md">
                  <Sparkles className="h-8 w-8 mx-auto text-gray-300" />
                  <h3 className="mt-4 text-lg font-medium">No Suggestions Found</h3>
                  <p className="mt-2 text-sm text-gray-500">
                    {selectedTab === 'all' 
                      ? 'No optimization suggestions are available for this job' 
                      : `No suggestions with status "${selectedTab}" found`}
                  </p>
                  {selectedTab !== 'all' && (
                    <Button
                      variant="link"
                      className="mt-2"
                      onClick={() => setSelectedTab('all')}
                    >
                      View all suggestions
                    </Button>
                  )}
                </div>
              )}
            </div>
            
            <div className="lg:col-span-2">
              {activeSuggestion ? (
                <Card>
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div className="flex items-start">
                        <div className="mt-1 mr-3">
                          {getSuggestionIcon(activeSuggestion.type)}
                        </div>
                        <div>
                          <CardTitle>{activeSuggestion.title}</CardTitle>
                          <CardDescription className="mt-1">
                            {activeSuggestion.description}
                          </CardDescription>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        {getSeverityBadge(activeSuggestion.severity)}
                        <Badge variant={
                          activeSuggestion.status === 'implemented' ? 'default' :
                          activeSuggestion.status === 'in_progress' ? 'secondary' :
                          activeSuggestion.status === 'ignored' ? 'outline' : 'secondary'
                        }>
                          {getStatusIcon(activeSuggestion.status)}
                          <span className="ml-1 capitalize">
                            {activeSuggestion.status.replace('_', ' ')}
                          </span>
                        </Badge>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div>
                        <h3 className="text-sm font-medium mb-2">Recommended Action</h3>
                        <p className="p-3 bg-gray-50 rounded-md">
                          {activeSuggestion.suggestedAction}
                        </p>
                      </div>
                      
                      <div>
                        <h3 className="text-sm font-medium mb-2">Expected Improvement</h3>
                        <div className="flex items-center p-3 bg-blue-50 rounded-md text-blue-800">
                          <div className="mr-3">
                            <svg className="w-12 h-12">
                              <circle
                                className="text-blue-200"
                                strokeWidth="4"
                                stroke="currentColor"
                                fill="transparent"
                                r="20"
                                cx="50%"
                                cy="50%"
                              />
                              <circle
                                className="text-blue-500"
                                strokeWidth="4"
                                strokeDasharray={2 * Math.PI * 20}
                                strokeDashoffset={2 * Math.PI * 20 * (1 - activeSuggestion.estimatedImprovement.percentage / 100)}
                                strokeLinecap="round"
                                stroke="currentColor"
                                fill="transparent"
                                r="20"
                                cx="50%"
                                cy="50%"
                              />
                              <text
                                x="50%"
                                y="50%"
                                textAnchor="middle"
                                dominantBaseline="middle"
                                className="text-xs font-medium"
                              >
                                {activeSuggestion.estimatedImprovement.percentage}%
                              </text>
                            </svg>
                          </div>
                          <div>
                            <p className="font-medium">
                              {activeSuggestion.estimatedImprovement.percentage}% improvement in {
                                activeSuggestion.estimatedImprovement.metric === 'executionTime' ? 'execution time' :
                                activeSuggestion.estimatedImprovement.metric === 'memory' ? 'memory usage' :
                                activeSuggestion.estimatedImprovement.metric === 'cpu' ? 'CPU utilization' :
                                'data throughput'
                              }
                            </p>
                            <p className="text-sm mt-1">
                              Implementing this suggestion will {
                                activeSuggestion.estimatedImprovement.metric === 'executionTime' ? 'reduce execution time' :
                                activeSuggestion.estimatedImprovement.metric === 'memory' ? 'decrease memory usage' :
                                activeSuggestion.estimatedImprovement.metric === 'cpu' ? 'lower CPU utilization' :
                                'increase data processing throughput'
                              } by approximately {activeSuggestion.estimatedImprovement.percentage}%.
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-sm font-medium mb-2">Implementation Complexity</h3>
                        <div className="flex items-center">
                          {Array.from({ length: 5 }).map((_, index) => (
                            <Star
                              key={index}
                              className={`h-5 w-5 ${
                                index < (
                                  activeSuggestion.type === 'scheduling' ? 1 :
                                  activeSuggestion.type === 'performance' ? 3 :
                                  activeSuggestion.type === 'resource' ? 2 :
                                  activeSuggestion.type === 'code' ? 4 : 2
                                )
                                  ? 'text-amber-500 fill-amber-500'
                                  : 'text-gray-300'
                              }`}
                            />
                          ))}
                          <span className="ml-2 text-sm text-gray-600">
                            {
                              activeSuggestion.type === 'scheduling' ? 'Very Easy' :
                              activeSuggestion.type === 'performance' ? 'Moderate' :
                              activeSuggestion.type === 'resource' ? 'Easy' :
                              activeSuggestion.type === 'code' ? 'Advanced' : 'Moderate'
                            }
                          </span>
                        </div>
                      </div>
                      
                      {activeSuggestion.type === 'code' && (
                        <div>
                          <h3 className="text-sm font-medium mb-2">Example Code</h3>
                          <pre className="p-3 bg-gray-900 text-gray-100 rounded-md overflow-auto text-xs font-mono">
                            {activeSuggestion.type === 'code' && activeSuggestion.title.includes('String') ? 
                              `// Before\nlet address = rawAddress;\naddress = address.replace(', USA', '');\naddress = address.replace('Street', 'St.');\naddress = address.replace('Avenue', 'Ave.');\n\n// After\nlet address = rawAddress.replace(/(, USA|Street|Avenue)/g, match => {\n  return match === ', USA' ? '' : \n         match === 'Street' ? 'St.' :\n         match === 'Avenue' ? 'Ave.' : match;\n});` : 
                              activeSuggestion.type === 'code' ? 
                              `// Before\nconst data = JSON.stringify(propertyData);\n\n// After\nconst data = MessagePack.encode(propertyData);` :
                              '// No code example available'}
                          </pre>
                        </div>
                      )}
                    </div>
                  </CardContent>
                  <CardFooter className="flex justify-between">
                    <div className="text-sm text-gray-500">
                      Created: {activeSuggestion.createdAt.toLocaleDateString()}
                    </div>
                    <div className="space-x-2">
                      {activeSuggestion.status !== 'implemented' && (
                        <Button
                          variant="outline"
                          onClick={() => handleUpdateSuggestionStatus(activeSuggestion.id, 'implemented')}
                        >
                          <CheckCircle className="h-4 w-4 mr-2" />
                          Mark as Implemented
                        </Button>
                      )}
                      
                      {activeSuggestion.status !== 'in_progress' && activeSuggestion.status !== 'implemented' && (
                        <Button
                          variant="outline"
                          onClick={() => handleUpdateSuggestionStatus(activeSuggestion.id, 'in_progress')}
                        >
                          <RefreshCw className="h-4 w-4 mr-2" />
                          Mark In Progress
                        </Button>
                      )}
                      
                      {activeSuggestion.status !== 'ignored' && activeSuggestion.status !== 'implemented' && (
                        <Button
                          variant="outline"
                          onClick={() => handleUpdateSuggestionStatus(activeSuggestion.id, 'ignored')}
                        >
                          <X className="h-4 w-4 mr-2" />
                          Ignore
                        </Button>
                      )}
                    </div>
                  </CardFooter>
                </Card>
              ) : (
                <Card>
                  <CardContent className="p-12">
                    <div className="text-center">
                      <Workflow className="h-12 w-12 mx-auto text-gray-300" />
                      <h3 className="mt-4 text-lg font-medium">No Suggestion Selected</h3>
                      <p className="mt-2 text-sm text-gray-500">
                        Select a suggestion from the list to view details and implementation guidance
                      </p>
                      {filteredSuggestions.length > 0 && (
                        <Button
                          className="mt-4"
                          onClick={() => setActiveSuggestion(filteredSuggestions[0])}
                        >
                          <ArrowRight className="h-4 w-4 mr-2" />
                          View First Suggestion
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}