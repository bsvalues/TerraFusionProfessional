import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  TextInput,
  ActivityIndicator,
  Alert,
  SafeAreaView,
  FlatList,
  Modal,
  Switch,
  KeyboardAvoidingView,
  Platform,
  Image,
} from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { useRoute, useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';

import {
  CollaborationService,
  CollaborationUser,
  Comment,
  ChangeRecord,
  ChangeType,
  EntityType,
  PresenceData,
} from '../services/CollaborationService';

/**
 * CollaborationScreen
 * 
 * A screen for real-time collaboration on appraisal projects
 */
const CollaborationScreen: React.FC = () => {
  // Get route and navigation
  const route = useRoute();
  const navigation = useNavigation();
  
  // Get parameters from route
  const projectId = route.params?.projectId || 'default';
  const projectName = route.params?.projectName || 'Unnamed Project';
  
  // Service instance
  const collaborationService = CollaborationService.getInstance();
  
  // State
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [activeUsers, setActiveUsers] = useState<CollaborationUser[]>([]);
  const [recentChanges, setRecentChanges] = useState<ChangeRecord[]>([]);
  const [comments, setComments] = useState<Comment[]>([]);
  const [userName, setUserName] = useState<string>('');
  const [newCommentText, setNewCommentText] = useState<string>('');
  const [selectedEntity, setSelectedEntity] = useState<{ type: EntityType; id: string } | null>(null);
  const [showNewCommentModal, setShowNewCommentModal] = useState<boolean>(false);
  const [showSettingsModal, setShowSettingsModal] = useState<boolean>(false);
  const [selectedComment, setSelectedComment] = useState<Comment | null>(null);
  const [showCommentDetailModal, setShowCommentDetailModal] = useState<boolean>(false);
  const [trackPresence, setTrackPresence] = useState<boolean>(true);
  const [showChangeHistoryModal, setShowChangeHistoryModal] = useState<boolean>(false);

  // Refs
  const scrollViewRef = useRef<ScrollView>(null);
  
  // Initialize
  useEffect(() => {
    const initializeCollaboration = async () => {
      try {
        setIsLoading(true);
        
        // Get user name from storage
        const storedUserName = await AsyncStorage.getItem('terrafield:userName');
        const name = storedUserName || `User_${Math.floor(Math.random() * 1000)}`;
        setUserName(name);
        
        // Initialize collaboration service
        const initialized = await collaborationService.initialize({
          serverUrl: 'wss://appraisalcore.replit.app/collaboration',
          room: `project_${projectId}`,
          user: {
            id: '', // Will be generated by the service
            name,
            role: 'editor',
          },
          autoConnect: true,
          persistLocally: true,
          trackPresence: trackPresence,
          trackHistory: true,
        });
        
        if (!initialized) {
          Alert.alert('Warning', 'Failed to initialize collaboration. Working in offline mode.');
        }
        
        // Subscribe to connection events
        const connectedSubscription = collaborationService.connected$.subscribe((connected) => {
          setIsConnected(connected);
        });
        
        // Subscribe to user presence events
        const presenceSubscription = collaborationService.userPresence$.subscribe((users) => {
          setActiveUsers(Array.from(users.values()));
        });
        
        // Subscribe to changes
        const changeSubscription = collaborationService.change$.subscribe((change) => {
          setRecentChanges((prev) => [change, ...prev].slice(0, 50));
        });
        
        // Subscribe to comments
        const commentSubscription = collaborationService.comment$.subscribe((comment) => {
          setComments((prev) => [comment, ...prev]);
        });
        
        // Load initial data
        setRecentChanges(collaborationService.getRecentChanges(50));
        setComments(collaborationService.getComments());
        
        // Update presence with current screen
        if (trackPresence) {
          collaborationService.updatePresence({
            currentView: 'collaboration',
            context: {
              projectId,
              projectName,
            },
          });
        }
        
        setIsLoading(false);
        
        // Return cleanup function
        return () => {
          connectedSubscription.unsubscribe();
          presenceSubscription.unsubscribe();
          changeSubscription.unsubscribe();
          commentSubscription.unsubscribe();
        };
      } catch (error) {
        console.error('Error initializing collaboration:', error);
        Alert.alert('Error', 'Failed to initialize collaboration features');
        setIsLoading(false);
      }
    };
    
    initializeCollaboration();
    
    // Clean up on unmount
    return () => {
      // Update presence
      if (trackPresence) {
        collaborationService.updatePresence({
          currentView: 'leaving',
        });
      }
    };
  }, [projectId, projectName]);
  
  // Save user name when it changes
  useEffect(() => {
    if (userName) {
      AsyncStorage.setItem('terrafield:userName', userName);
    }
  }, [userName]);
  
  // Handle connect/disconnect
  const handleConnectionToggle = async () => {
    if (isConnected) {
      collaborationService.disconnect();
    } else {
      await collaborationService.connect();
    }
  };
  
  // Handle add comment
  const handleAddComment = () => {
    if (!selectedEntity) {
      // No entity selected, prompt user to select
      Alert.alert(
        'Select Entity Type',
        'What are you commenting on?',
        [
          {
            text: 'Property',
            onPress: () => setSelectedEntity({ type: EntityType.PROPERTY, id: projectId }),
          },
          {
            text: 'Report',
            onPress: () => setSelectedEntity({ type: EntityType.REPORT, id: `report_${projectId}` }),
          },
          {
            text: 'Cancel',
            style: 'cancel',
          },
        ]
      );
      return;
    }
    
    setShowNewCommentModal(true);
  };
  
  // Handle save comment
  const handleSaveComment = () => {
    if (!newCommentText.trim() || !selectedEntity) return;
    
    const comment = collaborationService.addComment(
      newCommentText.trim(),
      selectedEntity.type,
      selectedEntity.id
    );
    
    if (comment) {
      setNewCommentText('');
      setShowNewCommentModal(false);
    } else {
      Alert.alert('Error', 'Failed to add comment');
    }
  };
  
  // Handle resolve comment
  const handleResolveComment = (commentId: string) => {
    const resolved = collaborationService.resolveComment(commentId);
    
    if (resolved) {
      // Update comments list
      setComments(
        comments.map((c) =>
          c.id === commentId ? { ...c, resolved: true } : c
        )
      );
      
      setShowCommentDetailModal(false);
    } else {
      Alert.alert('Error', 'Failed to resolve comment');
    }
  };
  
  // Handle update presence
  const handleUpdatePresence = (view: string, entity?: { type: EntityType; id: string }) => {
    if (!trackPresence) return;
    
    collaborationService.updatePresence({
      currentView: view,
      currentEntity: entity,
    });
  };
  
  // Handle change tracking toggle
  const handleTrackPresenceToggle = (value: boolean) => {
    setTrackPresence(value);
    
    // Update collaboration service
    if (value) {
      collaborationService.updatePresence({
        currentView: 'collaboration',
        context: {
          projectId,
          projectName,
        },
      });
    } else {
      // Clear presence
      if (isConnected) {
        collaborationService.updatePresence({
          currentView: 'invisible',
        });
      }
    }
  };
  
  // Format timestamp
  const formatTimestamp = (timestamp: number): string => {
    const date = new Date(timestamp);
    return date.toLocaleString();
  };
  
  // Get entity type display name
  const getEntityTypeDisplay = (type: EntityType): string => {
    switch (type) {
      case EntityType.PROPERTY:
        return 'Property';
      case EntityType.REPORT:
        return 'Report';
      case EntityType.PHOTO:
        return 'Photo';
      case EntityType.SKETCH:
        return 'Sketch';
      case EntityType.COMPARABLE:
        return 'Comparable';
      case EntityType.ADJUSTMENT:
        return 'Adjustment';
      case EntityType.MEASUREMENT:
        return 'Measurement';
      default:
        return 'Other';
    }
  };
  
  // Get change type display
  const getChangeTypeDisplay = (type: ChangeType): string => {
    switch (type) {
      case ChangeType.ADD:
        return 'Added';
      case ChangeType.UPDATE:
        return 'Updated';
      case ChangeType.DELETE:
        return 'Deleted';
      case ChangeType.COMMENT:
        return 'Commented';
      case ChangeType.PRESENCE:
        return 'Presence';
      case ChangeType.SYNC:
        return 'Synced';
      default:
        return 'Changed';
    }
  };
  
  // Render header
  const renderHeader = () => {
    return (
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <MaterialCommunityIcons name="arrow-left" size={24} color="#fff" />
        </TouchableOpacity>
        
        <Text style={styles.headerTitle}>Collaboration</Text>
        
        <TouchableOpacity
          style={styles.settingsButton}
          onPress={() => setShowSettingsModal(true)}
        >
          <MaterialCommunityIcons name="cog" size={24} color="#fff" />
        </TouchableOpacity>
      </View>
    );
  };
  
  // Render connection status
  const renderConnectionStatus = () => {
    return (
      <View style={styles.connectionContainer}>
        <View style={styles.connectionStatusContainer}>
          <View
            style={[
              styles.connectionIndicator,
              { backgroundColor: isConnected ? '#2ecc71' : '#e74c3c' },
            ]}
          />
          <Text style={styles.connectionStatus}>
            {isConnected ? 'Connected' : 'Disconnected'}
          </Text>
        </View>
        
        <TouchableOpacity
          style={[
            styles.connectionButton,
            { backgroundColor: isConnected ? '#e74c3c' : '#2ecc71' },
          ]}
          onPress={handleConnectionToggle}
        >
          <Text style={styles.connectionButtonText}>
            {isConnected ? 'Disconnect' : 'Connect'}
          </Text>
        </TouchableOpacity>
      </View>
    );
  };
  
  // Render active users
  const renderActiveUsers = () => {
    if (activeUsers.length === 0) {
      return (
        <View style={styles.emptyStateContainer}>
          <MaterialCommunityIcons name="account-off" size={24} color="#bdc3c7" />
          <Text style={styles.emptyStateText}>No active users</Text>
        </View>
      );
    }
    
    return (
      <FlatList
        horizontal
        data={activeUsers}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.userContainer}>
            <View
              style={[styles.userAvatar, { backgroundColor: item.color || '#3498db' }]}
            >
              <Text style={styles.userInitial}>
                {item.name.charAt(0).toUpperCase()}
              </Text>
            </View>
            <Text style={styles.userName}>{item.name}</Text>
            <View
              style={[
                styles.userStatusIndicator,
                { backgroundColor: item.isOnline ? '#2ecc71' : '#bdc3c7' },
              ]}
            />
          </View>
        )}
        style={styles.usersList}
        showsHorizontalScrollIndicator={false}
      />
    );
  };
  
  // Render comments
  const renderComments = () => {
    if (comments.length === 0) {
      return (
        <View style={styles.emptyStateContainer}>
          <MaterialCommunityIcons name="comment-off" size={24} color="#bdc3c7" />
          <Text style={styles.emptyStateText}>No comments yet</Text>
        </View>
      );
    }
    
    return (
      <FlatList
        data={comments.filter((c) => !c.resolved)}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={styles.commentItem}
            onPress={() => {
              setSelectedComment(item);
              setShowCommentDetailModal(true);
            }}
          >
            <View style={styles.commentHeader}>
              <Text style={styles.commentAuthor}>
                {activeUsers.find((u) => u.id === item.userId)?.name || 'Unknown User'}
              </Text>
              <Text style={styles.commentTime}>
                {formatTimestamp(item.createdAt)}
              </Text>
            </View>
            <Text style={styles.commentText} numberOfLines={2}>
              {item.text}
            </Text>
            <View style={styles.commentFooter}>
              <View style={styles.commentEntity}>
                <MaterialCommunityIcons
                  name={
                    item.entityType === EntityType.PROPERTY
                      ? 'home'
                      : item.entityType === EntityType.REPORT
                        ? 'file-document'
                        : item.entityType === EntityType.PHOTO
                          ? 'image'
                          : 'tag'
                  }
                  size={12}
                  color="#7f8c8d"
                />
                <Text style={styles.commentEntityText}>
                  {getEntityTypeDisplay(item.entityType)}
                </Text>
              </View>
              {item.resolved && (
                <View style={styles.resolvedBadge}>
                  <MaterialCommunityIcons name="check" size={12} color="#fff" />
                  <Text style={styles.resolvedText}>Resolved</Text>
                </View>
              )}
            </View>
          </TouchableOpacity>
        )}
        style={styles.commentsList}
      />
    );
  };
  
  // Render recent changes
  const renderRecentChanges = () => {
    if (recentChanges.length === 0) {
      return (
        <View style={styles.emptyStateContainer}>
          <MaterialCommunityIcons name="history" size={24} color="#bdc3c7" />
          <Text style={styles.emptyStateText}>No recent changes</Text>
        </View>
      );
    }
    
    return (
      <FlatList
        data={recentChanges.slice(0, 5)} // Show only the 5 most recent changes
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.changeItem}>
            <View style={styles.changeHeader}>
              <Text style={styles.changeType}>
                {getChangeTypeDisplay(item.type)}
              </Text>
              <Text style={styles.changeTime}>
                {formatTimestamp(item.timestamp)}
              </Text>
            </View>
            <View style={styles.changeContent}>
              <Text style={styles.changeEntity}>
                {getEntityTypeDisplay(item.entityType)} {item.entityId.split('_').pop()}
              </Text>
              <Text style={styles.changeUser}>
                by {activeUsers.find((u) => u.id === item.userId)?.name || 'Unknown User'}
              </Text>
            </View>
          </View>
        )}
        style={styles.changesList}
      />
    );
  };
  
  // Render new comment modal
  const renderNewCommentModal = () => {
    return (
      <Modal
        visible={showNewCommentModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowNewCommentModal(false)}
      >
        <KeyboardAvoidingView
          style={styles.modalOverlay}
          behavior={Platform.OS === 'ios' ? 'padding' : undefined}
        >
          <View style={styles.commentModal}>
            <View style={styles.commentModalHeader}>
              <Text style={styles.commentModalTitle}>New Comment</Text>
              <TouchableOpacity
                onPress={() => setShowNewCommentModal(false)}
              >
                <MaterialCommunityIcons name="close" size={24} color="#333" />
              </TouchableOpacity>
            </View>
            <Text style={styles.commentModalSubtitle}>
              {selectedEntity
                ? `On ${getEntityTypeDisplay(selectedEntity.type)} ${selectedEntity.id.split('_').pop()}`
                : 'Add a comment'}
            </Text>
            <TextInput
              style={styles.commentInput}
              multiline
              placeholder="Type your comment here..."
              value={newCommentText}
              onChangeText={setNewCommentText}
              autoFocus
            />
            <View style={styles.commentModalFooter}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setShowNewCommentModal(false)}
              >
                <Text style={styles.cancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.saveButton,
                  !newCommentText.trim() && styles.disabledButton,
                ]}
                onPress={handleSaveComment}
                disabled={!newCommentText.trim()}
              >
                <Text style={styles.saveButtonText}>Save</Text>
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </Modal>
    );
  };
  
  // Render comment detail modal
  const renderCommentDetailModal = () => {
    if (!selectedComment) return null;
    
    return (
      <Modal
        visible={showCommentDetailModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowCommentDetailModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.commentDetailModal}>
            <View style={styles.commentModalHeader}>
              <Text style={styles.commentModalTitle}>Comment</Text>
              <TouchableOpacity
                onPress={() => setShowCommentDetailModal(false)}
              >
                <MaterialCommunityIcons name="close" size={24} color="#333" />
              </TouchableOpacity>
            </View>
            <ScrollView style={styles.commentDetailContent}>
              <View style={styles.commentDetailItem}>
                <Text style={styles.commentDetailLabel}>Author:</Text>
                <Text style={styles.commentDetailValue}>
                  {activeUsers.find((u) => u.id === selectedComment.userId)?.name || 'Unknown User'}
                </Text>
              </View>
              <View style={styles.commentDetailItem}>
                <Text style={styles.commentDetailLabel}>Date:</Text>
                <Text style={styles.commentDetailValue}>
                  {formatTimestamp(selectedComment.createdAt)}
                </Text>
              </View>
              <View style={styles.commentDetailItem}>
                <Text style={styles.commentDetailLabel}>Entity:</Text>
                <Text style={styles.commentDetailValue}>
                  {getEntityTypeDisplay(selectedComment.entityType)} {selectedComment.entityId.split('_').pop()}
                </Text>
              </View>
              <View style={styles.commentDetailContent}>
                <Text style={styles.commentDetailLabel}>Comment:</Text>
                <View style={styles.commentDetailTextBox}>
                  <Text style={styles.commentDetailText}>{selectedComment.text}</Text>
                </View>
              </View>
            </ScrollView>
            <View style={styles.commentDetailFooter}>
              {!selectedComment.resolved && (
                <TouchableOpacity
                  style={styles.resolveButton}
                  onPress={() => handleResolveComment(selectedComment.id)}
                >
                  <MaterialCommunityIcons name="check" size={16} color="#fff" />
                  <Text style={styles.resolveButtonText}>Resolve</Text>
                </TouchableOpacity>
              )}
              <TouchableOpacity
                style={styles.closeButton}
                onPress={() => setShowCommentDetailModal(false)}
              >
                <Text style={styles.closeButtonText}>Close</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    );
  };
  
  // Render settings modal
  const renderSettingsModal = () => {
    return (
      <Modal
        visible={showSettingsModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowSettingsModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.settingsModal}>
            <View style={styles.settingsModalHeader}>
              <Text style={styles.settingsModalTitle}>Collaboration Settings</Text>
              <TouchableOpacity
                onPress={() => setShowSettingsModal(false)}
              >
                <MaterialCommunityIcons name="close" size={24} color="#333" />
              </TouchableOpacity>
            </View>
            <ScrollView style={styles.settingsContent}>
              <View style={styles.settingSection}>
                <Text style={styles.settingSectionTitle}>User Settings</Text>
                <View style={styles.settingItem}>
                  <Text style={styles.settingLabel}>Display Name</Text>
                  <TextInput
                    style={styles.settingInput}
                    value={userName}
                    onChangeText={setUserName}
                    placeholder="Enter your name"
                  />
                </View>
              </View>
              <View style={styles.settingSection}>
                <Text style={styles.settingSectionTitle}>Collaboration</Text>
                <View style={styles.settingItem}>
                  <Text style={styles.settingLabel}>Share my presence</Text>
                  <Switch
                    value={trackPresence}
                    onValueChange={handleTrackPresenceToggle}
                    trackColor={{ false: '#bdc3c7', true: '#3498db' }}
                    thumbColor={trackPresence ? '#fff' : '#f4f3f4'}
                  />
                </View>
                <TouchableOpacity
                  style={styles.historyButton}
                  onPress={() => {
                    setShowSettingsModal(false);
                    setShowChangeHistoryModal(true);
                  }}
                >
                  <MaterialCommunityIcons name="history" size={16} color="#fff" />
                  <Text style={styles.historyButtonText}>View Change History</Text>
                </TouchableOpacity>
              </View>
              <View style={styles.settingSection}>
                <Text style={styles.settingSectionTitle}>Connection</Text>
                <View style={styles.settingItem}>
                  <Text style={styles.settingLabel}>Status</Text>
                  <View style={styles.settingStatusContainer}>
                    <View
                      style={[
                        styles.settingStatusIndicator,
                        { backgroundColor: isConnected ? '#2ecc71' : '#e74c3c' },
                      ]}
                    />
                    <Text style={styles.settingStatusText}>
                      {isConnected ? 'Connected' : 'Disconnected'}
                    </Text>
                  </View>
                </View>
                <TouchableOpacity
                  style={[
                    styles.connectionButton,
                    { backgroundColor: isConnected ? '#e74c3c' : '#2ecc71' },
                  ]}
                  onPress={handleConnectionToggle}
                >
                  <Text style={styles.connectionButtonText}>
                    {isConnected ? 'Disconnect' : 'Connect'}
                  </Text>
                </TouchableOpacity>
              </View>
            </ScrollView>
            <TouchableOpacity
              style={styles.settingsSaveButton}
              onPress={() => setShowSettingsModal(false)}
            >
              <Text style={styles.settingsSaveButtonText}>Close</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    );
  };
  
  // Render change history modal
  const renderChangeHistoryModal = () => {
    return (
      <Modal
        visible={showChangeHistoryModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowChangeHistoryModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.changeHistoryModal}>
            <View style={styles.changeHistoryHeader}>
              <Text style={styles.changeHistoryTitle}>Change History</Text>
              <TouchableOpacity
                onPress={() => setShowChangeHistoryModal(false)}
              >
                <MaterialCommunityIcons name="close" size={24} color="#333" />
              </TouchableOpacity>
            </View>
            {recentChanges.length === 0 ? (
              <View style={styles.emptyStateContainer}>
                <MaterialCommunityIcons name="history" size={24} color="#bdc3c7" />
                <Text style={styles.emptyStateText}>No change history</Text>
              </View>
            ) : (
              <FlatList
                data={recentChanges}
                keyExtractor={(item) => item.id}
                renderItem={({ item }) => (
                  <View style={styles.historyItem}>
                    <View style={styles.historyItemHeader}>
                      <Text style={styles.historyItemType}>
                        {getChangeTypeDisplay(item.type)}
                      </Text>
                      <Text style={styles.historyItemTime}>
                        {formatTimestamp(item.timestamp)}
                      </Text>
                    </View>
                    <View style={styles.historyItemContent}>
                      <Text style={styles.historyItemEntity}>
                        {getEntityTypeDisplay(item.entityType)} {item.entityId.split('_').pop()}
                      </Text>
                      <Text style={styles.historyItemUser}>
                        by {activeUsers.find((u) => u.id === item.userId)?.name || 'Unknown User'}
                      </Text>
                    </View>
                    <View style={styles.historyItemFooter}>
                      <View
                        style={[
                          styles.syncStatusIndicator,
                          { backgroundColor: item.synced ? '#2ecc71' : '#f39c12' },
                        ]}
                      />
                      <Text style={styles.syncStatusText}>
                        {item.synced ? 'Synced' : 'Pending Sync'}
                      </Text>
                    </View>
                  </View>
                )}
                style={styles.historyList}
              />
            )}
            <TouchableOpacity
              style={styles.closeHistoryButton}
              onPress={() => setShowChangeHistoryModal(false)}
            >
              <Text style={styles.closeHistoryButtonText}>Close</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    );
  };
  
  // Render loading state
  if (isLoading) {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3498db" />
        <Text style={styles.loadingText}>Initializing collaboration...</Text>
      </SafeAreaView>
    );
  }
  
  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      {renderHeader()}
      
      {/* Connection status */}
      {renderConnectionStatus()}
      
      {/* Content */}
      <ScrollView
        style={styles.content}
        ref={scrollViewRef}
      >
        {/* Project info */}
        <View style={styles.projectContainer}>
          <Text style={styles.projectTitle}>{projectName}</Text>
          <Text style={styles.projectId}>Project ID: {projectId}</Text>
        </View>
        
        {/* Active users */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Active Users</Text>
          {renderActiveUsers()}
        </View>
        
        {/* Comments */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>Comments</Text>
            <TouchableOpacity
              style={styles.addButton}
              onPress={handleAddComment}
            >
              <MaterialCommunityIcons name="plus" size={16} color="#fff" />
              <Text style={styles.addButtonText}>Add</Text>
            </TouchableOpacity>
          </View>
          {renderComments()}
        </View>
        
        {/* Recent changes */}
        <View style={styles.section}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>Recent Changes</Text>
            <TouchableOpacity
              style={styles.viewAllButton}
              onPress={() => setShowChangeHistoryModal(true)}
            >
              <Text style={styles.viewAllButtonText}>View All</Text>
              <MaterialCommunityIcons name="chevron-right" size={16} color="#3498db" />
            </TouchableOpacity>
          </View>
          {renderRecentChanges()}
        </View>
      </ScrollView>
      
      {/* Modals */}
      {renderNewCommentModal()}
      {renderCommentDetailModal()}
      {renderSettingsModal()}
      {renderChangeHistoryModal()}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#7f8c8d',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#3498db',
    paddingVertical: 12,
    paddingHorizontal: 16,
  },
  backButton: {
    padding: 4,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
  },
  settingsButton: {
    padding: 4,
  },
  connectionContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#fff',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  connectionStatusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  connectionIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 8,
  },
  connectionStatus: {
    fontSize: 14,
  },
  connectionButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 4,
  },
  connectionButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '500',
  },
  content: {
    flex: 1,
  },
  projectContainer: {
    backgroundColor: '#fff',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  projectTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  projectId: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  section: {
    backgroundColor: '#fff',
    marginTop: 16,
    paddingBottom: 16,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: '#eee',
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#3498db',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 4,
  },
  addButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '500',
    marginLeft: 4,
  },
  viewAllButton: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  viewAllButtonText: {
    color: '#3498db',
    fontSize: 14,
  },
  emptyStateContainer: {
    padding: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  emptyStateText: {
    marginTop: 8,
    color: '#7f8c8d',
  },
  usersList: {
    paddingHorizontal: 8,
  },
  userContainer: {
    alignItems: 'center',
    marginHorizontal: 8,
    width: 60,
  },
  userAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 4,
  },
  userInitial: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  userName: {
    fontSize: 12,
    textAlign: 'center',
  },
  userStatusIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    position: 'absolute',
    top: 0,
    right: 10,
    borderWidth: 1,
    borderColor: '#fff',
  },
  commentsList: {
    maxHeight: 400,
  },
  commentItem: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  commentHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  commentAuthor: {
    fontWeight: '500',
  },
  commentTime: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  commentText: {
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 8,
  },
  commentFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  commentEntity: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  commentEntityText: {
    fontSize: 12,
    color: '#7f8c8d',
    marginLeft: 4,
  },
  resolvedBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#2ecc71',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
  },
  resolvedText: {
    fontSize: 10,
    color: '#fff',
    marginLeft: 2,
  },
  changesList: {
    maxHeight: 300,
  },
  changeItem: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  changeHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 4,
  },
  changeType: {
    fontWeight: '500',
  },
  changeTime: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  changeContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  changeEntity: {
    fontSize: 14,
  },
  changeUser: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  commentModal: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
    width: '100%',
    maxWidth: 500,
  },
  commentModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  commentModalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  commentModalSubtitle: {
    fontSize: 14,
    color: '#7f8c8d',
    marginBottom: 16,
  },
  commentInput: {
    borderWidth: 1,
    borderColor: '#eee',
    borderRadius: 4,
    padding: 12,
    minHeight: 120,
    textAlignVertical: 'top',
  },
  commentModalFooter: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 16,
  },
  cancelButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginRight: 8,
  },
  cancelButtonText: {
    color: '#7f8c8d',
  },
  saveButton: {
    backgroundColor: '#3498db',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 4,
  },
  disabledButton: {
    backgroundColor: '#bdc3c7',
  },
  saveButtonText: {
    color: '#fff',
    fontWeight: '500',
  },
  commentDetailModal: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
    width: '100%',
    maxWidth: 500,
    maxHeight: '80%',
  },
  commentDetailContent: {
    flex: 1,
  },
  commentDetailItem: {
    marginBottom: 16,
  },
  commentDetailLabel: {
    fontSize: 14,
    color: '#7f8c8d',
    marginBottom: 4,
  },
  commentDetailValue: {
    fontSize: 16,
  },
  commentDetailTextBox: {
    backgroundColor: '#f8f9fa',
    padding: 12,
    borderRadius: 4,
    marginTop: 4,
  },
  commentDetailText: {
    fontSize: 16,
    lineHeight: 24,
  },
  commentDetailFooter: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 16,
  },
  resolveButton: {
    backgroundColor: '#2ecc71',
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 4,
    marginRight: 8,
  },
  resolveButtonText: {
    color: '#fff',
    fontWeight: '500',
    marginLeft: 4,
  },
  closeButton: {
    backgroundColor: '#7f8c8d',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 4,
  },
  closeButtonText: {
    color: '#fff',
    fontWeight: '500',
  },
  settingsModal: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
    width: '100%',
    maxWidth: 500,
    maxHeight: '80%',
  },
  settingsModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  settingsModalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  settingsContent: {
    maxHeight: 400,
  },
  settingSection: {
    marginBottom: 24,
  },
  settingSectionTitle: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    paddingBottom: 8,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  settingLabel: {
    fontSize: 14,
  },
  settingInput: {
    borderWidth: 1,
    borderColor: '#eee',
    borderRadius: 4,
    padding: 8,
    width: 200,
  },
  settingStatusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingStatusIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 8,
  },
  settingStatusText: {
    fontSize: 14,
  },
  historyButton: {
    backgroundColor: '#3498db',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    borderRadius: 4,
  },
  historyButtonText: {
    color: '#fff',
    marginLeft: 8,
  },
  settingsSaveButton: {
    backgroundColor: '#3498db',
    alignItems: 'center',
    paddingVertical: 12,
    borderRadius: 4,
    marginTop: 16,
  },
  settingsSaveButtonText: {
    color: '#fff',
    fontWeight: '500',
  },
  changeHistoryModal: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
    width: '100%',
    maxWidth: 500,
    maxHeight: '80%',
  },
  changeHistoryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  changeHistoryTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  historyList: {
    maxHeight: 400,
  },
  historyItem: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  historyItemHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 4,
  },
  historyItemType: {
    fontWeight: '500',
  },
  historyItemTime: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  historyItemContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  historyItemEntity: {
    fontSize: 14,
  },
  historyItemUser: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  historyItemFooter: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  syncStatusIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 8,
  },
  syncStatusText: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  closeHistoryButton: {
    backgroundColor: '#3498db',
    alignItems: 'center',
    paddingVertical: 12,
    borderRadius: 4,
    marginTop: 16,
  },
  closeHistoryButtonText: {
    color: '#fff',
    fontWeight: '500',
  },
});

export default CollaborationScreen;